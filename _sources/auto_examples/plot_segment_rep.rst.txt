.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_segment_rep.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_segment_rep.py:


===================================================
Classifying Segments Directly with a Neural Network
===================================================

This is a basic example using a convolutional recurrent neural network to learn segments directly from time series data



.. image:: /auto_examples/images/sphx_glr_plot_segment_rep_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using TensorFlow backend.
    WARNING: Logging before flag parsing goes to stderr.
    W0827 15:33:27.957074 22687573178176 deprecation_wrapper.py:119] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.

    W0827 15:33:27.970474 22687573178176 deprecation_wrapper.py:119] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.

    W0827 15:33:27.971963 22687573178176 deprecation_wrapper.py:119] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.

    W0827 15:33:28.085487 22687573178176 deprecation_wrapper.py:119] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:133: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.

    W0827 15:33:28.093774 22687573178176 deprecation.py:506] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.
    Instructions for updating:
    Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.
    W0827 15:33:28.363399 22687573178176 deprecation_wrapper.py:119] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.

    W0827 15:33:28.382939 22687573178176 deprecation_wrapper.py:119] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.

    W0827 15:33:28.475867 22687573178176 deprecation.py:323] From /home/ubuntu/miniconda/envs/testenv/lib/python3.7/site-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
    Instructions for updating:
    Use tf.where in 2.0, which has the same broadcast rule as np.where
    N series in train:  105
    N series in test:  35
    N segments in train:  3519
    N segments in test:  1158
    Accuracy score:  0.3860103632090211





|


.. code-block:: default

    # Author: David Burns
    # License: BSD

    import matplotlib.image as mpimg
    import matplotlib.pyplot as plt
    from keras.layers import Dense, LSTM, Conv1D
    from keras.models import Sequential
    from keras.wrappers.scikit_learn import KerasClassifier
    from sklearn.model_selection import train_test_split

    from seglearn.datasets import load_watch
    from seglearn.pipe import Pype
    from seglearn.transform import SegmentX


    def crnn_model(width=100, n_vars=6, n_classes=7, conv_kernel_size=5,
                   conv_filters=10, lstm_units=10):
        input_shape = (width, n_vars)
        model = Sequential()
        model.add(Conv1D(filters=conv_filters, kernel_size=conv_kernel_size,
                         padding='valid', activation='relu', input_shape=input_shape))
        model.add(Conv1D(filters=conv_filters, kernel_size=conv_kernel_size,
                         padding='valid', activation='relu'))
        model.add(LSTM(units=lstm_units, dropout=0.1, recurrent_dropout=0.1))
        model.add(Dense(n_classes, activation="softmax"))

        model.compile(loss='categorical_crossentropy', optimizer='adam',
                      metrics=['accuracy'])

        return model


    # load the data
    data = load_watch()
    X = data['X']
    y = data['y']

    # create a segment learning pipeline
    width = 100

    pipe = Pype([('seg', SegmentX(order='C')),
                 ('crnn', KerasClassifier(build_fn=crnn_model, epochs=8, batch_size=256, verbose=0))])

    # split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

    pipe.fit(X_train, y_train)
    score = pipe.score(X_test, y_test)

    print("N series in train: ", len(X_train))
    print("N series in test: ", len(X_test))
    print("N segments in train: ", pipe.N_train)
    print("N segments in test: ", pipe.N_test)
    print("Accuracy score: ", score)

    img = mpimg.imread('segments.jpg')
    plt.imshow(img)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  9.740 seconds)


.. _sphx_glr_download_auto_examples_plot_segment_rep.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_segment_rep.py <plot_segment_rep.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_segment_rep.ipynb <plot_segment_rep.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
